{
  /* 指定待编译文件 | Specify the file to be compiled */
  // "files": []
  /* 设置保存文件的时候自动编译，需要编译器支持 | Set to automatically compile when saving the file, need compiler support */
  // compileOnSave: true,
  /* 表示编译器需要排除的文件或文件夹 | Indicates files or folders that the compiler needs to exclude */
  // exclude: []
  /* 引入其他配置文件，继承配置 | Introduce other configuration files, inherit configuration */
  // extends: []
  /* 指定要包含在程序中的文件名或模式的数组 | Specify an array of file names or patterns to be included in the program */
  // include: [                           
  //   ""src/**/*""
  // ]
  /* 指定依赖的工程 | Specify dependent projects*/
  // references: [],
  /* 设置自动引入库类型定义文件相关 | Set automatic import library type definition file related*/
  // enable   : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false；
  // include  : 数组类型，允许自动引入的库名，如：["jquery", "lodash"]；
  // exculde  : 数组类型，排除的库名。
  // typeAcquisition:{ }

  // 配置编译选项
  "compilerOptions": {
    /* 基本选项 | Basic options */
    // "incremental": true,                   /* TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度 | Enable incremental compilation */
    // "tsBuildInfoFile": "./",               /* 增量编译文件的存储位置 | Specify file to store incremental compilation information */
    // diagnostics: true,                     /* 打印诊断信息 | Print diagnostic information */
    "target": "ES5",                          /* 指定ECMAScript目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT' | Specify ECMAScript target version */
    // "module": "ES6",                       /* 指定模块代码生成(typescript 默认使用 es6 模块规范): 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. | Specify module code generation */
    // "lib": [],                             /* 指定要包含在编译中的库文件 | Specify library files to be included in the compilation*/
    // "allowJs": true,                       /* 对于 .js 结尾的文件也进行编译(当 composite 设置为 true 时，allowJs 必须设置为 false) | Allow javascript files to be compiled */
    // "checkJs": true,                       /* 检查.js 文件是否有语法错误 ( allowJs: true 是 checkJs 起作用的前置条件。) | Report errors in .js files */
    // "jsx": "preserve",                     /* 指定JSX代码生成: 'preserve 表示 .jsx', 'react-native 表示 .js', or 'react 表示 .js' | Specify JSX code generation */
    // "declaration": true,                   /* 产生相应的  '.d.ts' file | Generates corresponding */
    // "declarationMap": true,                /* 为每个对应的对象生成一个源映射 '.d.ts' file | Generates a sourcemap for each corresponding */
    // "sourceMap": true,                     /* 产生相应的 '.map' file | Generates corresponding */
    // "outFile": "./",                       /* 将所有 ts 文件编译后的代码输出到一个文件中 (当设置此选项target的值只能为amd | system) | Concatenate and emit output to single file */
    // "outDir": "./dist",                    /* 编译后的文件存放位置 | Redirect output structure to the directory */
    // "rootDir": "./",                       /* 表示编译哪个目录下的 *.ts 文件，但实际操作时发现即便 *.ts 文件不在 rootDir 规定的目录内，也能够编译。typescript 期待我们将源文件全部放到 rootDir 配置的目录下 | Specify the root directory of input files. Use to control the output directory structure with --outDir */
    // "composite": true,                     /* 启用项目编译 | Enable project compilation */
    // "removeComments": true,                /* 编译时删除注释 | Do not emit comments to output */
    // "importHelpers": true,                 /* 引入了tslib(安装tslib) | Import emit helpers from 'tslib' */
    // "downlevelIteration": true,            /* 解决es3或者es5时for..of、... 运算符、对象的解构赋值等特性可能会报错，设置 downlevelIteration 属性为 true 可以解决该报错 | Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3' */
    // "isolatedModules": true,               /* 每个文件作为一个模块单独编译 | Transpile each file as a separate module (similar to 'ts.transpileModule') */

    /* 严格的类型检查选项 | Strict Type-Checking Options */
    "strict": true,                           /* 严格模式(当设置为true则下面的7个全部设置为true) | Enable all strict type-checking options */
    // "noImplicitAny": true,                 /* tsc 隐式判断出变量类型为 any 时会报编译错误 | Raise error on expressions and declarations with an implied 'any' type */
    // "strictNullChecks": true,              /* 不允许把 null、undefined 赋值给其他类型变量 | Enable strict null checks */
    // "strictFunctionTypes": true,           /* 启用对功能类型的严格检查 | Enable strict checking of function types */
    // "strictBindCallApply": true,           /* 在函数上启用严格的“绑定”，“调用”和“应用”方法 | Enable strict 'bind', 'call', and 'apply' methods on functions */
    // "strictPropertyInitialization": true,  /* 类中的每个实例属性必须设置初始值,不然编译报错 | Enable strict checking of property initialization in classes */
    // "noImplicitThis": true,                /* 使用隐含的“any”类型引发“this”表达式的错误 | Raise error on 'this' expressions with an implied 'any' type */
    // "alwaysStrict": true,                  /* 将 *.ts 文件编译成 *.js 文件时是否在 js 文件顶部加上 "use strict"; 语句 | Parse in strict mode and emit "use strict" for each source file */

    /* 额外支票 | Additional Checks */
    // "noUnusedLocals": true,                /* 定义了变量，但是没有使用会报错 | Report errors on unused locals */
    // "noUnusedParameters": true,            /* 方法里定义的参数没有使用会报错 | Report errors on unused parameters */
    // "noImplicitReturns": true,             /* 每个分支都会有返回值 | Report error when not all code paths in function return a value */
    // "noFallthroughCasesInSwitch": true,    /* 当 case 语句不为空时，必须要有 break 关键字，否则报编译错误 | Report errors for fallthrough cases in switch statement */

    /* 模块分辨率选项 | Module Resolution Options */
    // "moduleResolution": "node",            /* 表示引入其它模块时如何解析，重点在 导入时 做的事 classic 无法解析node_modules | Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6)*/
    // "baseUrl": "./",                       /* 解析相对路径导入的模块时做的事 | Base directory to resolve non-absolute module names */
    // "paths": {},                           /* 设置 paths 属性必须要同时设置 baseUrl 属性，否则会报编译错误,该属性可以设置路径别名 | A series of entries which re-map imports to lookup locations relative to the 'baseUrl' */
    // "rootDirs": [],                        /* 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错 | List of root folders whose combined content represents the structure of the project at runtime */
    // "typeRoots": [
    //   "node_modules/@types", "index.d.ts"
    // ],                                     /* 默认情况，typescript 会去 node_modules/@types 目录下找类型声明文件。如果配置了 typeRoots 的值，typescript 只会去 typeRoots 的值找类型声明文件 | List of folders to include type definitions from */
    // "types": [
    //   "node","lodash"                      // 只会寻找 ./node_modules/@types/node, ./node_modules/@types/lodash 两个包的声明文件，其它包的声明文件不会找。
    // ],                                     /* 与 typeRoots 类似，如果指定 types 配置，只有被列出来的 npm 包才会被查找声明文件 | Type declaration files to be included in compilation */
    // "allowSyntheticDefaultImports": true,  /* 为了兼容不同 default 导出的方式 | Allow default imports from modules with no default export. This does not affect code emit, just typechecking */
    "esModuleInterop": true,                  /* 解决导入问题 (如果项目迁移import 导入则会报错 开启后则解决) | Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports' */
    // "preserveSymlinks": true,              /* 不解析符号链接到它们的实际路径; 将符号链接文件当作真正的文件来处理。| Do not resolve the real path of symlinks */
    // "allowUmdGlobalAccess": true,          /* 允许在模块中访问 UMD 全局变量 | Allow accessing UMD globals from modules. */

    /* Source选项 | Source Map Options */
    // "sourceRoot": "",                      /* 指定调试器应该定位TypeScript文件而不是源位置的位置 | Specify the location where debugger should locate TypeScript files instead of source locations */
    // "mapRoot": "",                         /* 指定调试器应该定位映射文件的位置，而不是生成的位置 | Specify the location where debugger should locate map files instead of generated locations */
    // "inlineSourceMap": true,               /* 发出一个带有源映射的文件，而不是一个单独的文件 | Emit a single file with source maps instead of having a separate file */
    // "inlineSources": true,                 /* 在单个文件中，将源文件与源文件一起发出;需要设置- inlineSourceMap或- sourceMap | Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set */

    /* Experimental选项 | Experimental Options */
    // "experimentalDecorators": true,        /* 支持对ES7 decorator的实验支持 | Enables experimental support for ES7 decorators */
    // "emitDecoratorMetadata": true,         /* 启用了对为decorator发出类型元数据的实验性支持 | Enables experimental support for emitting type metadata for decorators */
    
    // listEmittedFiles: true                 /* 打印输出文件 | Print output file */
    // "listFiles": true                      /* 打印编译的文件(包括引用的声明文件) | Print compiled files (including referenced declaration files) */
  },
}